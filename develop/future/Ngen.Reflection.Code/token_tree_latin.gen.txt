
// Tokenization Rules
'...' - Denotes a list of single characters assigned to a paradigm with NAME
A | .B - Denotes all of A or any subset (.) of B
A + B  - Denotes a subset of A followed by a subset of B
A - B - Denotes any subset of A excluding a subset of B
A(#)  - Denotes any subsets of A followed by the # subset of A
A*    - Denotes multiple subsets of A followed by a space
A[#]  - Denotes a maximum length of A subsets

// Syntactic Rules


// latin-english tokens
// Token-tree for latin english
@token (latin-english)

#ALPHABETA {
#	LOWER		[abcdefghijklmnopqrstuvwxyz]
#	UPPER		[ABCDEFGHIJKLMNOPQRSTUVWXYZ] 

~	LETTER		[.LOWER | .UPPER]
~	WORD		.LETTER*
}

#MATH   {
	NEGATE		-
	DOT 		.
	ADD 		+
	DIVIDE		/
	MULTIPLY 	*
	EXPONENT  	^
	SUBSET		_
	EQUAL		=
	BITWISEOR 	|
	FUNCTION	f
	BITWISEAND	&
}

#NUMERIC {
#	DIGIT		[0123456789]


~	POSITIVE	.DIGIT*
~	NEGATIVE	.MATH(NEGATE).DIGIT*
~	NUMBER 		[.NEGATIVE | .POSITIVE]
~	DECIMAL         [.NUMBER [.] .POSITIVE*]

? IS_NEGATIVE
}

#SYMBOL {
#	PUNCUATION 	[?!.,;~:]
#	QUOTE	    	['"`]
#	REFERENCE 	[@#$&]
}



CLOUSRE		=()[]{}\/

SYMBOL		=


// latin-english-cpp tokens
// Token-tree for latin-english c++

@token (-cpp)
TYPENAME	= WORD + POSITIVE
ADD		= +
MINUS   	= -
DIVIDE 		= /
MULTIPLY 	= *
BINARY		= POSITIVE + b
HEXADIGIT	= DIGIT + (ABCDEF | abcdef)
ADDRESS		= 0x + HEXADIGIT*
